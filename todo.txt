RequestFactory.parseRequest(request)

Returns a request object
Patterns used:
	State used in parsing
	Factory used in parsing
	Builder used in response
	Proxy/Strategy used in dispatcher

	discussed so far:
		x Factory
		Builder (tent.)
		x Strategy
		x State
		Composition
		Decorator
		Flyweight
		Proxy
		Visitor
		Observer
		Singleton (not really discussed)

	potential uses:
	Singleton for config

	The good:
		Use of state in parsing

	The bad:
		Response reader is messy


02/25/2012
===

Parsing states

begin
request line
headers
blank
body

What should each parsing state do?
	parse the buffer as necessary
	return next state OR null when done


Does the default file redirect to index.html?  Sniff using HTTPFox
Make responsebuilder callable only once

02/27/2012
	
Release 3

	x The server shall listen listen for requests on a port specified at run time
		specify port at run-time

	x The server shall support console logging
		x Log GET
		x Log POST
			x add postdata to request + new request
			x modify equals
			x modify request equals test
			x add parse postdata line to parser + unit test
			x parse postdata
			x parse POST test (possible parser state reorg)
			x parse body (?)
			x Request.toString();
			
		x Log HEAD
		x Log DELETE

	x The server shall handle unsupported requests gracefully
		x 404

	x Design dispatcher and server

	x Response.toString()

	x Build Server
		Server
			setPort
			setRootDirectory
			run
			stop

	x Build dispatcher

	x command-line rootDirectory option

	x Build Handler interface
		x hook up staticfilehandler to plain-text types

	x The server shall support plain-text filetypes (html, txt, css, js) \
		x Dispatcher per filetype (N/A)

	x The server shall support the JPEG filetype
		x give a quick try
		x Responses content-length

	x specify htdocs at run-time

	The server shall support the following HTTP 1.1 requests: GET, POST, HEAD, and DELETE
		x GET requests will return the desired resource
		x POST requests will return the desired resource, with POST data logged in the console
		x HEAD requests will return headers and be logged to the console
		x DELETE requests will have no effect, but will be logged to the console

	Build cookie parsing
	Set cookies in response
	The server shall support cookies

--> Build session
		id
		Map

	Build session manager
		cache
		getSession(id)
		storeSession()

		shutdown // write all sessions to disk
		initSessionStore


	The server shall support cookie-based sessions
		serializable sessions (?)

	The server shall support basic authentication



Release 4

	The server shall support cgi scripts
	The server shall support a generic server configuration mechanism
	demo dynamic page with custom handler
	specific content-type support
		Responses with MIME/type

	Log unsupported requests properly and send 501 accordingly

Optional (MVC web framework):

	The server shall support configurable URL dispatching to client controllers
	The server shall support client controllers
	The server shall support processing of Mustache templates for views
