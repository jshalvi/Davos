RequestFactory.parseRequest(request)

Returns a request object
Patterns used:
	State used in parsing
	Factory used in parsing
	Builder used in response
	Command used in dispatcher
	Decorator to be used in reading

	discussed so far:
		x Factory
		Builder (tent.)
		x Strategy
		x State
		Composition
		Decorator
		Flyweight
		Proxy
		Visitor
		Observer
		Singleton (not really discussed)

	potential uses:
	Singleton for config

	The good:
		Use of state in parsing

	The bad:
		Response reader is messy


02/25/2012
===

Parsing states

begin
request line
headers
blank
body

What should each parsing state do?
	parse the buffer as necessary
	return next state OR null when done


Does the default file redirect to index.html?  Sniff using HTTPFox
Make responsebuilder callable only once

02/27/2012
	
Release 3

	x The server shall listen listen for requests on a port specified at run time
		specify port at run-time

	x The server shall support console logging
		x Log GET
		x Log POST
			x add postdata to request + new request
			x modify equals
			x modify request equals test
			x add parse postdata line to parser + unit test
			x parse postdata
			x parse POST test (possible parser state reorg)
			x parse body (?)
			x Request.toString();
			
		x Log HEAD
		x Log DELETE

	x The server shall handle unsupported requests gracefully
		x 404

	x Design dispatcher and server

	x Response.toString()

	x Build Server
		Server
			setPort
			setRootDirectory
			run
			stop

	x Build dispatcher

	x command-line rootDirectory option

	x Build Handler interface
		x hook up staticfilehandler to plain-text types

	x The server shall support plain-text filetypes (html, txt, css, js) \
		x Dispatcher per filetype (N/A)

	x The server shall support the JPEG filetype
		x give a quick try
		x Responses content-length

	x specify htdocs at run-time

	x The server shall support the following HTTP 1.1 requests: GET, POST, HEAD, and DELETE
		x GET requests will return the desired resource
		x POST requests will return the desired resource, with POST data logged in the console
		x HEAD requests will return headers and be logged to the console
		x DELETE requests will have no effect, but will be logged to the console

	x Build session
		id
		Map

Final release

	x Refactor readLine
	x Add --help [usage]


Extra

	x Convert to context request handling

	x Build cookie parsing
	x Set cookies in response
	x The server shall support cookies

	x The server shall support cookie-based sessions

	x Build session manager
		x cache
		x getSession(id)
		x storeSession()

Extra++


	shutdown // write all sessions to disk
	initSessionStore


	serializable sessions (?)

	The server shall support basic authentication

	set name with form
	times accessed


Release 4

	The server shall support cgi scripts
	The server shall support a generic server configuration mechanism
	demo dynamic page with custom handler
	specific content-type support
		Responses with MIME/type

	Log unsupported requests properly and send 501 accordingly

Optional (MVC web framework):

	The server shall support configurable URL dispatching to client controllers
	The server shall support client controllers
	The server shall support processing of Mustache templates for views


Random notes:
===

ContextFactory.newContext(request, session) // server wants this
ContextFactory.newContext(request, session, response) // handler wants this

x Context
	request
	response
	session


	setHandler
	setRequest

	setSession
	getSession
		returns a copy, always


Executor
// this idea is just to properly use the state pattern if possible to encapsulate
// the context and executor together.
	execute(context)


Handler
	Context execute(context)

ExecutorFactor.newExecutor

BobHandler {
	execute(Context) {
		// mutate session
		// set a response
	}

How to make cookies:
	add Cookies to header
	add cookie parsing to request
		Cookie: key=val;
	add cookie construction to response 
		Set-Cookie: key=val;
	for now, we just want to store a session id

junit.framework.AssertionFailedError: expected:
<Set-Cookie: testkey=testval;>
<Set-Cookie: testkey=testval;>
	at junit.framework.Assert.fail(Assert.java:50)
	at junit.framework.Assert.failNotEquals(Assert.java:287)
	at junit.framework.Assert.assertEquals(Assert.java:67)
	at junit.framework.Assert.assertEquals(Assert.java:74)
	at com.shalvi.davos.http.ResponseTEST.testSetCookie(ResponseTEST.java:137)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)

	

Report
===
document
Main
Server
Handler
HTTP
Session
